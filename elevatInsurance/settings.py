"""
Django settings for elevatInsurance project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import platform
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#^%otoo7@)j9a8_6m)n8om&2_x6@d2i(*mw^97pme+b-dy0#ze'

IRDAI_AGENT_CHECK_URL = os.getenv('IRDAI_AGENT_CHECK_URL','https://sandbox.surepass.io/api/v1/irdai/verify')
IRDAI_API_TOKEN = os.getenv('IRDAI_API_TOKEN','eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0MzA2MzU1NiwianRpIjoiOWVmZThhMWQtN2Y1NS00NjBkLTg4OWItODY1YjJjMTYyYjRlIiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2Lm5ldGxlYWZpbmZvc29mdEBzdXJlcGFzcy5pbyIsIm5iZiI6MTc0MzA2MzU1NiwiZXhwIjoxNzQ1NjU1NTU2LCJlbWFpbCI6Im5ldGxlYWZpbmZvc29mdEBzdXJlcGFzcy5pbyIsInRlbmFudF9pZCI6Im1haW4iLCJ1c2VyX2NsYWltcyI6eyJzY29wZXMiOlsidXNlciJdfX0.bZ8TiTwB2icgumtCCp-MTzI3uamEm4b7gTYT7JC4Yn0')
# SECURITY WARNING: don't run with debug turned on in production!
APPLY_STATIC = os.getenv('APPLY_STATIC', 'FALSE').upper()

DEBUG = True if APPLY_STATIC == 'TRUE' else False

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")

# Allow iframes from same origin
X_FRAME_OPTIONS = 'ALLOWALL'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'empPortal',
    'django_q',
    'django_cron',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
]
MIDDLEWARE += ['empPortal.middleware.AutoLogoutMiddleware.AutoLogoutMiddleware']

ROOT_URLCONF = 'elevatInsurance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'empPortal.global_var.cache_buster',
            ],
        },
    },
]

WSGI_APPLICATION = 'elevatInsurance.wsgi.application'

# Expires session when browser is closed
# Session will expire when the browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

CRON_CLASSES = [
    'empPortal.crons.ExtractFilesFromZip',
    'empPortal.crons.GettingSourceId',
    'empPortal.crons.GettingPdfExtractedData',
    'empPortal.crons.CreateNewPolicy',
    'empPortal.crons.GettingSourceIdForSinglePolicies',
    'empPortal.crons.GettingPdfExtractedDataSinglePolicies',
    'empPortal.crons.CreateNewPolicySinglePolicy'
    
    # 'empPortal.crons.updatePolicyInfoByPolicyNumber'
]

# Inactivity timeout â€” auto logout after 10 minutes of no activity
SESSION_COOKIE_AGE = 600  # in seconds (600s = 10 minutes)

# Refresh the session expiry time with every request
SESSION_SAVE_EVERY_REQUEST = True
CHATPDF_API_KEY = os.getenv('CHATPDF_API_KEY','')
CHATPDF_SOURCE_API_URL = os.getenv('CHATPDF_SOURCE_API_URL','')
CHATPDF_CHAT_API_URL = os.getenv('CHATPDF_CHAT_API_URL','')

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DATABASE_NAME', 'django'),
        'USER': os.getenv('DATABASE_USER', 'root'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', 'net@123'),
        'HOST': os.getenv('DATABASE_HOST', '127.0.0.1'),
        'PORT': os.getenv('DATABASE_PORT', '3380'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        }
    }
}

# settings.py

# settings.py
MYOPERATOR_API_KEY = os.getenv('MYOPERATOR_API_KEY', 'MYOPERATOR_API_KEY')
MYOPERATOR_SENDER_ID = os.getenv('MYOPERATOR_SENDER_ID', 'MYOPERATOR_SENDER_ID')
MYOPERATOR_SMS_URL = "https://sms.myoperator.biz/V2/http-customize-api.php"

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Detect if running on Windows
IS_WINDOWS = platform.system() == "Windows"

# Check if APPLY_STATIC is set to "True" (defaults to False if not set)
APPLY_STATIC = os.getenv("APPLY_STATIC", "False") == "True"

if APPLY_STATIC or IS_WINDOWS:  # Windows (Development)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    STATIC_URL = '/static/'
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR, 'empPortal', 'media')  # Windows-friendly path

else:  # Linux (Production with Nginx)
    STATIC_URL = '/empPortal/static/'
    STATIC_ROOT = '/usr/share/nginx/html/netinsurance/empPortal/static/'

    MEDIA_URL = "/empPortal/media/"
    MEDIA_ROOT = '/usr/share/nginx/html/netinsurance/empPortal/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTHENTICATION_BACKENDS = ['empPortal.authentication.EmailAuthBackend']
AUTH_USER_MODEL = 'empPortal.Users'

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
INSURER_NAME = os.getenv("INSURER_NAME")

LOGIN_URL = "/login/"
LOGOUT_REDIRECT_URL = "/login/"


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


Q_CLUSTER = {
    'name': 'DjangoQ',
    'workers': 4,
    'recycle': 500,
    'timeout': 60,
    'retry': 90,
    'queue_limit': 500,
    'bulk': 10,
    'orm': 'default',  # use Django ORM
}

Q2_CLUSTER_NAME = 'mycluster'

Q2_CONFIG = {
    'name': Q2_CLUSTER_NAME,
    'workers': 4,
    'recycle': 500,
    'timeout': 120,
    'compress': True,
    'save_limit': 250,
    'queue_limit': 500,
    'cpu_affinity': 1,
    'label': 'Django Q2 Cluster',
    'orm': 'default',
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, 
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'django_app.log',
            'formatter': 'verbose',
        },
        'policies': {
            'class': 'logging.FileHandler',
            'filename': 'policies.log',
            'formatter': 'verbose',
        },
        'crons':{
            'class':'logging.FileHandler',
            'filename': 'logs/crons.log',
            'formatter':'verbose',
        }

    },
    'loggers': {
        # For all app modules
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',  # Can be INFO, WARNING, ERROR in production
        },
        'empPortal.tasks': {
            'handlers': ['policies'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'empPortal.crons':{
            'handlers':['crons'],
            'level': 'DEBUG',  # Can be INFO, WARNING, ERROR in production
            'propagate': False,
        }
    },
}
